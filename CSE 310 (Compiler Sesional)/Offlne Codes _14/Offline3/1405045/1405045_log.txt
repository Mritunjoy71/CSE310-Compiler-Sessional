Line 1 : type_specifier	: INT

Line 1 : declaration_list :	ID
x

Line 1 : declaration_list : 	declaration_list COMMA ID
y

Line 1 : declaration_list : 	declaration_list COMMA ID
z

Line 1 : var_declaration : type_specifier declaration_list SEMICOLON

Line 1 : unit : var_declaration

Line 1 : program : unit

Line 1 : type_specifier	: FLOAT

Line 1 : declaration_list :	ID
a

Line 1 : var_declaration : type_specifier declaration_list SEMICOLON

Line 1 : unit : var_declaration

Line 1 : program : program unit

Line 3 : type_specifier	: VOID

Line 3 : func_declaration : 	type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
foo

Line 3 : unit : func_declaration

Line 3 : program : program unit

Line 5 : type_specifier	: INT

Line 5 : type_specifier	: INT

Line 5 : parameter_list  : type_specifier ID
a

Line 5 : type_specifier	: INT

Line 5 : parameter_list  : parameter_list COMMA type_specifier ID
b

Line 6 : variable : ID
a

Line 6 : factor : variable

Line 6 : unary_expression : factor

Line 6 : term : unary_expression

Line 6 : simple_expression : term

Line 6 : variable : ID
b

Line 6 : factor : variable

Line 6 : unary_expression : factor

Line 6 : term : unary_expression

Line 6 : simple_expression : simple_expression ADDOP term

Line 6 : rel_expression : simple_expression

Line 6 : logic_expression : rel_expression

Line 6 : expression : logic_expression

Line 6 : statement : RETURN expression SEMICOLON

Line 6 : statements : statement

 ScopeTable# 2
 6 --> < a : ID , 0 > 
 7 --> < b : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 0 > 
 4 --> < y : ID , 0 > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 7 : compound_statement : LCURL statements RCURL

Line 7 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
var

Line 7 : unit : func_definition

Line 7 : program : program unit

Line 9 : type_specifier	: VOID

Line 10 : variable : ID
x

Line 10 : factor : CONST_INT
2

Line 10 : unary_expression : factor

Line 10 : term : unary_expression

Line 10 : simple_expression : term

Line 10 : rel_expression : simple_expression

Line 10 : logic_expression : rel_expression

Line 10 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , 0 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 10 : expression_statement : expression SEMICOLON

Line 10 : statement : expression_statement

Line 10 : statements : statement

Line 11 : variable : ID
y

Line 11 : variable : ID
x

Line 11 : factor : variable

Line 11 : unary_expression : factor

Line 11 : term : unary_expression

Line 11 : simple_expression : term

Line 11 : factor : CONST_INT
5

Line 11 : unary_expression : factor

Line 11 : term : unary_expression

Line 11 : simple_expression : simple_expression ADDOP term

Line 11 : rel_expression : simple_expression

Line 11 : logic_expression : rel_expression

Line 11 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 11 : expression_statement : expression SEMICOLON

Line 11 : statement : expression_statement

Line 11 : statements : statements statement

 ScopeTable# 3

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 12 : compound_statement : LCURL statements RCURL

Line 12 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
foo

Line 12 : unit : func_definition

Line 12 : program : program unit

Line 14 : type_specifier	: INT

Line 15 : type_specifier	: INT

Line 15 : declaration_list :	ID LTHIRD CONST_INT RTHIRD
a
2

Line 15 : declaration_list : 	declaration_list COMMA ID
c

Line 15 : declaration_list : 	declaration_list COMMA ID
i

Line 15 : declaration_list : 	declaration_list COMMA ID
j

Line 15 : var_declaration : type_specifier declaration_list SEMICOLON

Line 15 : statement : var_declaration

Line 15 : statements : statement

Line 15 : type_specifier	: FLOAT

Line 15 : declaration_list :	ID
d

Line 15 : var_declaration : type_specifier declaration_list SEMICOLON

Line 15 : statement : var_declaration

Line 15 : statements : statements statement

Line 16 : factor : CONST_INT
0

Line 16 : unary_expression : factor

Line 16 : term : unary_expression

Line 16 : simple_expression : term

Line 16 : rel_expression : simple_expression

Line 16 : logic_expression : rel_expression

Line 16 : expression : logic_expression

Line 16 : variable : ID LTHIRD expression RTHIRD
a

Line 16 : factor : CONST_INT
1

Line 16 : unary_expression : factor

Line 16 : term : unary_expression

Line 16 : simple_expression : term

Line 16 : rel_expression : simple_expression

Line 16 : logic_expression : rel_expression

Line 16 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 4
 1 --> < i : ID , 0 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 > 
 9 --> < d : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 16 : expression_statement : expression SEMICOLON

Line 16 : statement : expression_statement

Line 16 : statements : statements statement

Line 17 : factor : CONST_INT
1

Line 17 : unary_expression : factor

Line 17 : term : unary_expression

Line 17 : simple_expression : term

Line 17 : rel_expression : simple_expression

Line 17 : logic_expression : rel_expression

Line 17 : expression : logic_expression

Line 17 : variable : ID LTHIRD expression RTHIRD
a

Line 17 : factor : CONST_INT
5

Line 17 : unary_expression : factor

Line 17 : term : unary_expression

Line 17 : simple_expression : term

Line 17 : rel_expression : simple_expression

Line 17 : logic_expression : rel_expression

Line 17 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 4
 1 --> < i : ID , 0 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 5 } > 
 8 --> < c : ID , 0 > 
 9 --> < d : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 17 : expression_statement : expression SEMICOLON

Line 17 : statement : expression_statement

Line 17 : statements : statements statement

Line 18 : variable : ID
i

Line 18 : factor : CONST_INT
0

Line 18 : unary_expression : factor

Line 18 : term : unary_expression

Line 18 : simple_expression : term

Line 18 : rel_expression : simple_expression

Line 18 : logic_expression : rel_expression

Line 18 : expression : logic_expression

Line 18 : variable : ID LTHIRD expression RTHIRD
a

Line 18 : factor : variable

Line 18 : unary_expression : factor

Line 18 : term : unary_expression

Line 18 : simple_expression : term

Line 18 : factor : CONST_INT
1

Line 18 : unary_expression : factor

Line 18 : term : unary_expression

Line 18 : simple_expression : term

Line 18 : rel_expression : simple_expression

Line 18 : logic_expression : rel_expression

Line 18 : expression : logic_expression

Line 18 : variable : ID LTHIRD expression RTHIRD
a

Line 18 : factor : variable

Line 18 : unary_expression : factor

Line 18 : term : unary_expression

Line 18 : simple_expression : simple_expression ADDOP term

Line 18 : rel_expression : simple_expression

Line 18 : logic_expression : rel_expression

Line 18 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 4
 1 --> < i : ID , 10 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 5 } > 
 8 --> < c : ID , 0 > 
 9 --> < d : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 18 : expression_statement : expression SEMICOLON

Line 18 : statement : expression_statement

Line 18 : statements : statements statement

Line 19 : variable : ID
j

Line 19 : factor : CONST_INT
2

Line 19 : unary_expression : factor

Line 19 : term : unary_expression

Line 19 : factor : CONST_INT
3

Line 19 : unary_expression : factor

Line 19 : term : term MULOP unary_expression

Line 19 : simple_expression : term

Line 19 : factor : CONST_INT
5

Line 19 : unary_expression : factor

Line 19 : term : unary_expression

Line 19 : factor : CONST_INT
3

Line 19 : unary_expression : factor

Line 19 : term : term MULOP unary_expression

Line 19 : simple_expression : term

Line 19 : factor : CONST_INT
4

Line 19 : unary_expression : factor

Line 19 : term : unary_expression

Line 19 : simple_expression : term

Line 19 : rel_expression : simple_expression RELOP simple_expression

Line 19 : factor : CONST_INT
8

Line 19 : unary_expression : factor

Line 19 : term : unary_expression

Line 19 : simple_expression : term

Line 19 : rel_expression : simple_expression

Line 19 : logic_expression : rel_expression LOGICOP rel_expression

Line 19 : expression : logic_expression

Line 19 : factor : LPAREN expression RPAREN

Line 19 : unary_expression : factor

Line 19 : term : unary_expression

Line 19 : simple_expression : simple_expression ADDOP term

Line 19 : rel_expression : simple_expression

Line 19 : factor : CONST_INT
2

Line 19 : unary_expression : factor

Line 19 : term : unary_expression

Line 19 : simple_expression : term

Line 19 : rel_expression : simple_expression

Line 19 : logic_expression : rel_expression LOGICOP rel_expression

Line 19 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 4
 1 --> < i : ID , 10 > 
 2 --> < j : ID , 1 > 
 6 --> < a : ID , { 1 5 } > 
 8 --> < c : ID , 0 > 
 9 --> < d : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 19 : expression_statement : expression SEMICOLON

Line 19 : statement : expression_statement

Line 19 : statements : statements statement

Line 20 : variable : ID
d

Line 20 : factor : CONST_INT
1

Line 20 : unary_expression : factor

Line 20 : term : unary_expression

Line 20 : simple_expression : term

Line 20 : rel_expression : simple_expression

Line 20 : logic_expression : rel_expression

Line 20 : arguments : logic_expression

Line 20 : factor : CONST_INT
2

Line 20 : unary_expression : factor

Line 20 : term : unary_expression

Line 20 : factor : CONST_INT
3

Line 20 : unary_expression : factor

Line 20 : term : term MULOP unary_expression

Line 20 : simple_expression : term

Line 20 : rel_expression : simple_expression

Line 20 : logic_expression : rel_expression

Line 20 : arguments : arguments COMMA logic_expression

Line 20 : argument_list : arguments

Line 20 : factor : ID LPAREN argument_list RPAREN
var

Line 20 : unary_expression : factor

Line 20 : term : unary_expression

Line 20 : simple_expression : term

Line 20 : factor : CONST_FLOAT
3.5

Line 20 : unary_expression : factor

Line 20 : term : unary_expression

Line 20 : factor : CONST_INT
2

Line 20 : unary_expression : factor

Line 20 : term : term MULOP unary_expression

Line 20 : simple_expression : simple_expression ADDOP term

Line 20 : rel_expression : simple_expression

Line 20 : logic_expression : rel_expression

Line 20 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 4
 1 --> < i : ID , 10 > 
 2 --> < j : ID , 1 > 
 6 --> < a : ID , { 1 5 } > 
 8 --> < c : ID , 0 > 
 9 --> < d : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 20 : expression_statement : expression SEMICOLON

Line 20 : statement : expression_statement

Line 20 : statements : statements statement

Line 21 : factor : CONST_INT
0

Line 21 : unary_expression : factor

Line 21 : term : unary_expression

Line 21 : simple_expression : term

Line 21 : rel_expression : simple_expression

Line 21 : logic_expression : rel_expression

Line 21 : expression : logic_expression

Line 21 : statement : RETURN expression SEMICOLON

Line 21 : statements : statements statement

 ScopeTable# 4
 1 --> < i : ID , 10 > 
 2 --> < j : ID , 1 > 
 6 --> < a : ID , { 1 5 } > 
 8 --> < c : ID , 0 > 
 9 --> < d : ID , 0 > 

 ScopeTable# 1
 3 --> < x : ID , 2 > 
 4 --> < y : ID , -3 >  < var : ID > 
 5 --> < z : ID , 0 > 
 6 --> < a : ID , 0 > 
 12 --> < foo : ID > 

Line 22 : compound_statement : LCURL statements RCURL

Line 22 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
main

Line 22 : unit : func_definition

Line 22 : program : program unit

Line 23 : start : program

Total Lines : 23

Total Errors : 0
