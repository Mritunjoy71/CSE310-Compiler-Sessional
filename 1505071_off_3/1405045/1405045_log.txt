Line 1 : type_specifier	: INT

Line 1 : type_specifier	: INT

Line 1 : parameter_list  : type_specifier ID
a

Line 2 : variable : ID
a

Line 2 : factor : variable

Line 2 : unary_expression : factor

Line 2 : term : unary_expression

Line 2 : simple_expression : term

Line 2 : rel_expression : simple_expression

Line 2 : logic_expression : rel_expression

Line 2 : expression : logic_expression

Line 2 : statement : RETURN expression SEMICOLON

Line 2 : statements : statement

 ScopeTable# 2
 6 --> < a : ID , 0 > 

 ScopeTable# 1

Line 3 : compound_statement : LCURL statements RCURL

Line 3 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
func

Line 3 : unit : func_definition

Line 3 : program : unit

Line 5 : type_specifier	: INT

Line 6 : type_specifier	: INT

Line 6 : declaration_list :	ID LTHIRD CONST_INT RTHIRD
a
2

Line 6 : declaration_list : 	declaration_list COMMA ID
c

Line 6 : declaration_list : 	declaration_list COMMA ID
i

Line 6 : declaration_list : 	declaration_list COMMA ID
j

Line 6 : var_declaration : type_specifier declaration_list SEMICOLON

Line 6 : statement : var_declaration

Line 6 : statements : statement

Line 6 : type_specifier	: FLOAT

Line 6 : declaration_list :	ID
c

Line 6 : var_declaration : type_specifier declaration_list SEMICOLON

Line 6 : statement : var_declaration

Line 6 : statements : statements statement

Line 7 : factor : CONST_FLOAT
2.5

Line 7 : unary_expression : factor

Line 7 : term : unary_expression

Line 7 : simple_expression : term

Line 7 : rel_expression : simple_expression

Line 7 : logic_expression : rel_expression

Line 7 : expression : logic_expression

Line 7 : variable : ID LTHIRD expression RTHIRD
a

Line 7 : factor : CONST_INT
1

Line 7 : unary_expression : factor

Line 7 : term : unary_expression

Line 7 : simple_expression : term

Line 7 : rel_expression : simple_expression

Line 7 : logic_expression : rel_expression

Line 7 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3
 1 --> < i : ID , 0 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 >  < c : ID , 0 > 

 ScopeTable# 1
 12 --> < func : ID > 

Line 7 : expression_statement : expression SEMICOLON

Line 7 : statement : expression_statement

Line 7 : statements : statements statement

Line 8 : variable : ID
i

Line 8 : factor : CONST_FLOAT
2.3

Line 8 : unary_expression : factor

Line 8 : term : unary_expression

Line 8 : simple_expression : term

Line 8 : rel_expression : simple_expression

Line 8 : logic_expression : rel_expression

Line 8 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3
 1 --> < i : ID , 2 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 >  < c : ID , 0 > 

 ScopeTable# 1
 12 --> < func : ID > 

Line 8 : expression_statement : expression SEMICOLON

Line 8 : statement : expression_statement

Line 8 : statements : statements statement

Line 9 : variable : ID
j

Line 9 : factor : CONST_INT
2

Line 9 : unary_expression : factor

Line 9 : term : unary_expression

Line 9 : factor : CONST_FLOAT
3.7

Line 9 : unary_expression : factor

Line 9 : term : term MULOP unary_expression

Line 9 : simple_expression : term

Line 9 : rel_expression : simple_expression

Line 9 : logic_expression : rel_expression

Line 9 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3
 1 --> < i : ID , 2 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 >  < c : ID , 0 > 

 ScopeTable# 1
 12 --> < func : ID > 

Line 9 : expression_statement : expression SEMICOLON

Line 9 : statement : expression_statement

Line 9 : statements : statements statement

Line 10 : variable : ID
a

Line 10 : factor : CONST_INT
4

Line 10 : unary_expression : factor

Line 10 : term : unary_expression

Line 10 : simple_expression : term

Line 10 : rel_expression : simple_expression

Line 10 : logic_expression : rel_expression

Line 10 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3
 1 --> < i : ID , 2 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 >  < c : ID , 0 > 

 ScopeTable# 1
 12 --> < func : ID > 

Line 10 : expression_statement : expression SEMICOLON

Line 10 : statement : expression_statement

Line 10 : statements : statements statement

Line 11 : variable : ID
a

Line 11 : factor : variable

Line 11 : unary_expression : factor

Line 11 : term : unary_expression

Line 11 : simple_expression : term

Line 11 : rel_expression : simple_expression

Line 11 : logic_expression : rel_expression

Line 11 : arguments : logic_expression

Line 11 : argument_list : arguments

Line 11 : factor : ID LPAREN argument_list RPAREN
func

Line 11 : unary_expression : factor

Line 11 : term : unary_expression

Line 11 : simple_expression : term

Line 11 : rel_expression : simple_expression

Line 11 : logic_expression : rel_expression

Line 11 : expression : logic_expression

Line 11 : expression_statement : expression SEMICOLON

Line 11 : statement : expression_statement

Line 11 : statements : statements statement

Line 12 : variable : ID
b

Line 12 : factor : CONST_INT
8

Line 12 : unary_expression : factor

Line 12 : term : unary_expression

Line 12 : simple_expression : term

Line 12 : rel_expression : simple_expression

Line 12 : logic_expression : rel_expression

Line 12 : expression : variable ASSIGNOP logic_expression

 ScopeTable# 3
 1 --> < i : ID , 2 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 >  < c : ID , 0 > 

 ScopeTable# 1
 12 --> < func : ID > 

Line 12 : expression_statement : expression SEMICOLON

Line 12 : statement : expression_statement

Line 12 : statements : statements statement

Line 13 : factor : CONST_INT
0

Line 13 : unary_expression : factor

Line 13 : term : unary_expression

Line 13 : simple_expression : term

Line 13 : rel_expression : simple_expression

Line 13 : logic_expression : rel_expression

Line 13 : expression : logic_expression

Line 13 : statement : RETURN expression SEMICOLON

Line 13 : statements : statements statement

 ScopeTable# 3
 1 --> < i : ID , 2 > 
 2 --> < j : ID , 0 > 
 6 --> < a : ID , { 1 0 } > 
 8 --> < c : ID , 0 >  < c : ID , 0 > 

 ScopeTable# 1
 12 --> < func : ID > 

Line 14 : compound_statement : LCURL statements RCURL

Line 14 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
main

Line 14 : unit : func_definition

Line 14 : program : program unit

Line 15 : start : program

Total Lines : 15

Total Errors : 4
